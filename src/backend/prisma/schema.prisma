generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model directories {
  directoryId       Int           @id @default(autoincrement())
  directoryName     String
  directoryRoute    String
  directoryFather   Int?
  dateCreated       DateTime?     @map("datecreated") @db.Date
  lastModified      String?       @map("lastmodified") @db.VarChar(15)
  versions          Int?
  teamId            Int
  descripcion       String?
  directories       directories?  @relation("directoriesTodirectories", fields: [directoryFather], references: [directoryId], onDelete: Cascade, onUpdate: NoAction, map: "directories_dfather_fkey")
  other_directories directories[] @relation("directoriesTodirectories")
  teams             teams?        @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: NoAction, map: "directories_teamid_fkey")
  files             files[]

  @@index([directoryFather], map: "fki_directories_dfather_fkey")
}

model files {
  fileId      Int          @id @default(autoincrement())
  directoryId Int?
  fileName    String
  fileType    String
  fileHashed  String
  fileSize    BigInt
  fileRoute   String
  teamId      Int?
  directories directories? @relation(fields: [directoryId], references: [directoryId], onDelete: Cascade, onUpdate: NoAction, map: "files_directoryid_fkey")
  teams       teams?       @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: NoAction, map: "files_teamid_fkey")
}

model instructions {
  instructionId     Int     @id @default(autoincrement())
  testId            Int
  action            String
  sequence          Int
  searchKey         String
  searchBy          String
  textInput         String
  instructionStatus Boolean @default(false)
  tests             tests   @relation(fields: [testId], references: [testId], onDelete: NoAction, onUpdate: NoAction)
}

model teams {
  teamId      Int           @id @default(autoincrement())
  teamName    String
  code        String?
  directories directories[]
  files       files[]
  tests       tests[]
  user_teams  user_teams[]
}

model tests {
  testId       Int            @id @default(autoincrement())
  userId       Int
  testStatus   Boolean
  createdAt    DateTime       @db.Date
  modifiedAt   DateTime       @db.Date
  teamId       Int?
  instructions instructions[]
  teams        teams?         @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: NoAction, map: "tests_teamid_fkey")
  users        users          @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "tests_userid_fkey")
}

model user_teams {
  userId Int
  teamId Int
  teams  teams @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: NoAction, map: "user_teams_teamid_fkey")
  users  users @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "user_teams_userid_fkey")

  @@id([userId, teamId])
}

model users {
  userId     Int          @id @default(autoincrement())
  username   String
  email      String       @unique(map: "email_unique")
  password   String
  tests      tests[]
  user_teams user_teams[]
}
