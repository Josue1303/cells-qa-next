generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model directories {
  directoryId   Int           @id @default(autoincrement())
  userId        Int
  directoryName String
  directoryRoute String
  directoryFather Int?
  dateCreated   DateTime?     @map("datecreated")
  lastModified  String?       @map("lastmodified")
  versions      Int?
  teamId        Int?
  directories   directories?  @relation("directoriesTodirectories", fields: [directoryFather], references: [directoryId], onDelete: NoAction, onUpdate: NoAction)
  other_directories directories[] @relation("directoriesTodirectories")
  teams         teams?        @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: NoAction)
  users         users         @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
  files         files[]
}

model files {
  fileId      Int          @id @default(autoincrement())
  userId      Int
  directoryId Int?
  fileName    String
  fileType    String
  fileHashed  String
  fileSize    BigInt
  fileRoute   String
  teamId      Int?
  directories directories? @relation(fields: [directoryId], references: [directoryId], onDelete: NoAction, onUpdate: NoAction)
  teams       teams?       @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: NoAction)
  users       users        @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
}

model instructions {
  instructionId     Int     @id @default(autoincrement())
  testId            Int
  action            String
  sequence          Int
  searchKey         String
  searchBy          String
  textInput         String
  instructionStatus Boolean @default(false)
  tests             tests   @relation(fields: [testId], references: [testId], onDelete: Cascade, onUpdate: NoAction)
}

model teams {
  teamId     Int      @id @default(autoincrement())
  teamName   String
  code       String
  directories directories[]
  files      files[]
  tests      tests[]
  user_teams user_teams[]
}

model tests {
  testId       Int            @id @default(autoincrement())
  userId       Int
  testStatus   Boolean
  createdAt    DateTime
  modifiedAt   DateTime
  teamId       Int?
  instructions instructions[]
  teams        teams?         @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: NoAction)
  users        users          @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
}

model user_teams {
  userId  Int
  teamId  Int
  users   users @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
  teams   teams @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, teamId])
}

model users {
  userId      Int    @id @default(autoincrement())
  username    String
  email       String @unique
  password    String
  directories directories[]
  files       files[]
  tests       tests[]
  user_teams  user_teams[]
}
